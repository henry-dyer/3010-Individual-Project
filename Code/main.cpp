#include "Board.hpp"
#include "GenBoard.hpp"
#include "CVBoard.hpp"

#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <time.h>
#include <sstream>

// cmake --build . --config Release


int board_options();
Board load_board(Difficulty difficulty);
Difficulty select_difficulty();

int main()
{
    Board board;
    std::string filename;

    std::cout << "Welcome to Sudoku, please select one of the following options" << std::endl;
    int choice = board_options();

    if(choice == 1)
    {
        CVBoard cvboard;
        cvboard.input_filename();
        cvboard.find_board();
        return 0;
    }
    else
    {
        board = load_board(select_difficulty());
    }

    board.solve_board();

    while(!board.game_over())
    {
        board.print_board();
        board.execute_move();
    }

    return 0;
}

/*
Lets user select whether to upload file or play game created by CPU
@param NONE
@return 1 - Upload Photo , 2 - CPU Board
*/
int board_options()
{
    std::string choice = "0";
    while(choice != "1" || choice != "2")
    {  
        std::cout << "1. Upload a photo of a sudoku game." << std::endl;
        std::cout << "2. Start a new game." << std::endl;

        std::cin >> choice;

        if(choice == "1" || choice == "2") return stoi(choice);

        std::cout << "Invalid option selected, please try again." << std::endl; 
    }   
    return -1;
}

/*
Lets user select difficulty level for board generated by CPU
@param NONE
@return 1 - Easy , 2 - Medium, 3 - Hard
*/
Difficulty select_difficulty()
{
    std::string difficulty = "";

    while(1)
    {
        std::cout << "Select a difficulty level: " << std::endl;
        std::cout << "1. Easy, 2. Medium. 3. Hard" << std::endl;
        std::cin >> difficulty;

        if(difficulty == "1" || difficulty == "2" || difficulty == "3") break;
        else 
        {
            std::cout << "Invalid option selected, please enter 1, 2, or 3." << std::endl;
        }
    }
    return static_cast<Difficulty>(stoi(difficulty));
}

/*
Selects a random board from a text file and then reads the input from the file
creating a board object.
@param Difficulty level
@return Board with square filled from text file
*/
Board load_board(Difficulty difficulty)
{
    std::string filename;
    std::string file_number;
    std::string file_line;
    int i = 0;
    int j =0;
    int randFile;
    int board[9][9];

    switch(difficulty)
    {
        case Difficulty::EASY:
            filename += "easy_";
            break;
        case Difficulty::MEDIUM:
            filename += "medium_";
            break;
        case Difficulty::HARD:
            filename += "hard_";
        default:
            std::cout << "Invalid Parameter\n";
    }

    srand(time(NULL));

    randFile = rand() % 1 + 1;

    file_number = std::to_string(randFile);

    filename = filename + file_number + ".txt";

    std::cout << "Filename: " << filename << std::endl;

    std::ifstream board_file(filename);

    while(getline(board_file, file_line))
    {
        std::stringstream ss(file_line);
        j = 0;
        while(ss.good())
        {
            std::string substr;
            getline(ss, substr, ',');
            board[i][j] = stoi(substr);
            j++;
        }
        i++;
    }
    return Board(board);
}

